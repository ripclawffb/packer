
---
- hosts: all
  remote_user: Administrator
  gather_facts: false

  tasks:
    - name: Include default vars
      include_vars: vars.yml

    - name: Install features
      win_feature:
        name: "{{ item.name }}"
        state: "{{ item.state | default(omit) }}"
        include_management_tools: "{{ item.include_management_tools | default(omit) }}"
        include_sub_features: "{{ item.include_sub_features | default(omit) }}"
      loop: "{{ windows_features }}"

    - name: Install Chocolatey
      win_chocolatey:
        name: chocolatey

    - name: Add Chocolatey source
      win_chocolatey_source:
        name: Chocolatey internal source
        state: present
        source: "{{ lookup('env','ARTIFACTORY_URL') }}"
        source_username: "{{ lookup('env','ARTIFACTORY_USERNAME') }}"
        source_password: "{{ lookup('env','ARTIFACTORY_TOKEN') }}"

    - name: Install packages
      win_chocolatey:
        name: "{{ item.name }}"
        version: "{{ item.version | default(omit) }}"
        package_params: "{{ item.package_params | default(omit) }}"
        state: "{{ item.state | default('present') }}"
        architecture: "{{ item.architecture | default(omit) }}"
        install_args: "{{ item.install_args | default(omit) }}"
        timeout: "{{ item.timeout | default(omit) }}"
        force: "{{ item.force | default(omit) }}"
      with_items: "{{ choco_packages }}"
      ignore_errors: true

    - name: Install pip packages
      win_shell: "pip install {{ item }}"
      loop: "{{ pip_packages }}"

    - name: Create Jenkins folder
      win_file:
        path: C:\Jenkins
        state: directory

    # Add exclusions for Windows defender
    # https://github.com/PowerShell/xDefender
    - name: Add Windows Defender PowerShell module
      win_psmodule:
        name: WindowsDefender
        state: present

    - name: Add Windows Defender path exclusions
      win_dsc:
        resource_name: WindowsDefender
        IsSingleInstance: 'Yes'
        ExclusionPath: "{{ windows_defender_excluded_paths }}"

    - name: Add Networking PowerShell module
      win_psmodule:
        name: NetworkingDsc
        state: present

    - name: Enable logging of blocked connections
      win_dsc:
        resource_name: FirewallProfile
        Name: "{{ item.name }}"
        LogBlocked: true
      loop:
        - name: Private
        - name: Public
        - name: Domain

    - name: Add firewall rules
      win_firewall_rule:
        name: "{{ item.name }}"
        action: "{{ item.action }}"
        direction: "{{ item.direction }}"
        enabled: "{{ item.enabled }}"
        localip: "{{ item.localip | default(omit) }}"
        localport: "{{ item.localport | default(omit) }}"
        protocol: "{{ item.protocol }}"
        remoteip: "{{ item.remoteip | default(omit) }}"
        remoteport: "{{ item.remoteport | default(omit) }}"
        state: "{{ item.state }}"
      loop: "{{ windows_firewall_rules }}"

    - name: Add Windows registry keys
      win_regedit:
        path: "{{ item.path }}"
        name: "{{ item.name }}"
        data: "{{ item.data }}"
        type: "{{ item.type }}"
      loop: "{{ windows_registry_keys }}"

    - name: Add Windows environment variables
      win_environment:
        name: "{{ item.name }}"
        state: "{{ item.state | default(omit) }}"
        level: "{{ item.level }}"
        value: "{{ item.value | default(omit) }}"
      loop: "{{ windows_environment }}"

    - name: Add to Windows path environment variable
      win_path:
        name: "{{ item.name | default(omit) }}"
        state: "{{ item.state | default(omit) }}"
        scope: "{{ item.scope | default(omit) }}"
        elements: "{{ item.elements }}"
      loop: "{{ windows_path }}"

    - name: Set C pagefile, override if exists
      win_pagefile:
        automatic: false
        drive: C
        initial_size: "{{ windows_pagefile_initial_size }}"
        maximum_size: "{{ windows_pagefile_maximum_size }}"
        state: present

    - name: Create EC2 config folders
      win_file:
        path: "{{ item }}"
        state: directory
      loop:
        - C:\ProgramData\Amazon
        - C:\ProgramData\Amazon\EC2-Windows
        - C:\ProgramData\Amazon\EC2-Windows\Launch
        - C:\ProgramData\Amazon\EC2-Windows\Launch\Config
        - C:\ProgramData\Amazon\ENA_Drivers

    - name: Download EC2 launch files and drivers
      win_get_url:
        url: "{{ item.url }}"
        dest: "{{ item.dest }}"
      loop:
        - url: https://s3.amazonaws.com/ec2-downloads-windows/EC2Launch/latest/EC2-Windows-Launch.zip
          dest: C:\ProgramData\Amazon\EC2-Windows-Launch.zip
        - url: https://s3.amazonaws.com/ec2-downloads-windows/EC2Launch/latest/install.ps1
          dest: C:\ProgramData\Amazon\install.ps1
        - url: https://s3.amazonaws.com/ec2-windows-drivers-downloads/ENA/Latest/AwsEnaNetworkDriver.zip
          dest: C:\ProgramData\Amazon\ENA_Drivers\AwsEnaNetworkDriver.zip

    - name: Unzip ENA drivers
      win_unzip:
        src: C:\ProgramData\Amazon\ENA_Drivers\AwsEnaNetworkDriver.zip
        dest: C:\ProgramData\Amazon\ENA_Drivers\

    # - name: Install ENA drivers
    #   win_command: powershell.exe -ExecutionPolicy ByPass -File C:\ProgramData\Amazon\ENA_Drivers\install.ps1
    #   retries: 5

    - name: Install EC2 launch files
      win_command: powershell.exe -ExecutionPolicy ByPass -File C:\ProgramData\Amazon\install.ps1

    - name: Copy EC2 launch config
      win_copy:
        content: >
          {
            "SetComputerName": true,
            "SetWallpaper": true,
            "AddDnsSuffixList": true,
            "ExtendBootVolumeSize": true,
            "AdminPasswordType": "Random",
            "AdminPassword": ""
          }
        dest: C:\ProgramData\Amazon\EC2-Windows\Launch\Config\LaunchConfig.json
